// import { Metadata } from 'next';
// import Link from 'next/link';

// export const metadata: Metadata = {
//   title: 'Game Submission Guide - randomplayables',
//   description: 'A step-by-step guide for submitting your game to the randomplayables platform.',
// };

// export default function SubmissionGuidePage() {
//   return (
//     <div className="bg-white p-6 md:p-10 rounded-lg shadow-md max-w-4xl mx-auto">
//       <h1 className="text-3xl font-bold mb-6 text-gray-800">Game Submission Guide</h1>
      
//       <div className="prose prose-lg max-w-none space-y-6">
//         <p>
//           Welcome, creator! This guide provides an easy-to-follow roadmap to get your games published on the RandomPlayables main page. Follow these steps to ensure a smooth submission process.
//         </p>

//         <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 1: Game Creation </h2>
//         <p>
//           You have two primary paths for creating a game compatible with our platform: using our integrated GameLab tool or an external Large Language Model (LLM).
//         </p>

//         <h3 className="text-xl font-medium mt-6 mb-2">Understanding Game Types </h3>
//         <p>Before you begin, it's important to know the types of games you can build:</p>
//         <ul className="list-disc pl-5">
//           <li><strong>Regular Games:</strong> Standard web games that do not require external AI model calls or player-vs-player competition.</li>
//           <li><strong>Games that use AI models:</strong> These games may leverage platform APIs for functionalities like embeddings or chat, which can consume a player's API credits. You must declare this during submission.</li>
//           <li><strong>Gauntlet-enabled Games:</strong> These are specifically designed for player-vs-player competition through our Gauntlet system. See Gowap as an example. </li>
//         </ul>

//         <h3 className="text-xl font-medium mt-6 mb-2">Option A: Using GameLab (Recommended)</h3>
//         <p>
//           GameLab is our AI-assisted in-browser IDE designed to accelerate your development process.
//         </p>
//         <ol className="list-decimal pl-5">
//           <li><strong>Connect GitHub First:</strong> Before you start coding, navigate to <Link href="/gamelab">GameLab</Link>, select the "RPTS" language option, and use the "Connect GitHub to Upload" feature. This allows you to save the code generated by GameLab directly to your own GitHub repository.</li>
//           <li><strong>Start Creating:</strong> Use the RPTS (RandomPlayables TypeScript) option in GameLab to generate a full project structure for a new game. If you're building a player-vs-player game, be sure to check the "Generate Gauntlet-enabled game" box. </li>
//           <li><strong>Save Your Work:</strong> Once the AI has generated your game, save the code to your connected GitHub account.</li>
//         </ol>

//         <h3 className="text-xl font-medium mt-6 mb-2">Option B: Using an External LLM</h3>
//         <p>
//           If you prefer using a mainstream LLM like Gemini or GPT-5, you can ensure compatibility by providing the right context. 
//         </p>
//         <ol className="list-decimal pl-5">
//           <li><strong>Provide Context:</strong> Give the LLM the full codebase of the main `randomplayables/rp` repository and an example of an existing game from the platform (like Gowap or Gotham Loops). Use tools like https://repomix.com/ to download codebases in an LLM-friendly-format.</li>
//           <li><strong>Prompt for Compatibility:</strong> Clearly instruct the LLM to create a new game that is compatible with the platform's existing architecture, particularly the `apiService.ts` for session and data handling.</li>
//         </ol>

//         <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 2: Testing Your Game </h2>
//         <p>
//           Testing you game can make the submission process smoother.
//         </p>
//         <ol className="list-decimal pl-5">
//           <li><strong>Local Testing:</strong> First, ensure the game runs correctly on your local computer.</li>
//           <li><strong>Platform Integration Test:</strong> Set up a local development version of the RandomPlayables platform by following the instructions in our main GitHub repository's README file. Test your game within this environment to confirm it integrates correctly with the platform's APIs.</li>
//         </ol>

//         <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 3: Game Submission </h2>
//         <p>
//           Once your game is created, follow these steps to submit it for review.
//         </p>
//         <ol className="list-decimal pl-5">
//           <li><strong>Create a GitHub Release:</strong> Go to your game's repository on GitHub. Create a new release and use a git tag that matches the version number you intend to submit (e.g., `v1.0.0`). This is a critical step for version control.</li>
//           <li><strong>Navigate to Your Profile:</strong> Go to your user profile on the RandomPlayables platform.</li>
//           <li><strong>Submit Your Game:</strong> Click on "Submit a Game" and carefully fill out the form. </li>
//           <ul className="list-disc pl-5 my-2">
//             <li><strong>Version Match:</strong> Ensure the version number you enter on the form is identical to the tag of your GitHub release. </li>
//           </ul>
//           <li><strong>Authorize for Peer Review:</strong> You will be prompted to connect your repository to our platform for peer review. When authorizing the GitHub App, grant access **only** to the specific repository for the game you are submitting. Do not grant access to all your repositories.</li>
//           <li><strong>Await Review:</strong> Check your email for updates from our review team. If changes are required, you must create a new GitHub release with an updated version number and resubmit the game form. </li>
//         </ol>
//       </div>
//     </div>
//   );
// }







import { Metadata } from 'next';
import Link from 'next/link';

export const metadata: Metadata = {
  title: 'Game Submission Guide - randomplayables',
  description: 'A step-by-step guide for submitting your game to the randomplayables platform.',
};

export default function SubmissionGuidePage() {
  return (
    <div className="bg-white p-6 md:p-10 rounded-lg shadow-md max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-gray-800">Game Submission Guide</h1>
      
      <div className="prose prose-lg max-w-none space-y-6">
        <p>
          Welcome, creator! This guide provides an easy-to-follow roadmap to get your games published on the RandomPlayables main page. Follow these steps to ensure a smooth submission process.
        </p>

        <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 1: Game Creation </h2>
        <p>
          You have two primary paths for creating a game compatible with our platform: using our integrated GameLab tool or an external Large Language Model (LLM).
        </p>

        <h3 className="text-xl font-medium mt-6 mb-2">Understanding Game Types </h3>
        <p>Before you begin, it's important to know the types of games you can build:</p>
        <ul className="list-disc pl-5">
          <li><strong>Regular Games:</strong> Standard web games that do not require external AI model calls or player-vs-player competition.</li>
          <li><strong>Games that use AI models:</strong> These games may leverage platform APIs for functionalities like embeddings or chat, which can consume a player's API credits. You must declare this during submission.</li>
          <li><strong>Gauntlet-enabled Games:</strong> These are specifically designed for player-vs-player competition through our Gauntlet system. See Gowap as an example. </li>
        </ul>

        <h3 className="text-xl font-medium mt-6 mb-2">Option A: Using GameLab (Recommended)</h3>
        <p>
          GameLab is our AI-assisted in-browser IDE designed to accelerate your development process.
        </p>
        <ol className="list-decimal pl-5">
          <li><strong>Connect GitHub First:</strong> Before you start coding, navigate to <Link href="/gamelab">GameLab</Link>, select the "RPTS" language option, and use the "Connect GitHub to Upload" feature. This allows you to save the code generated by GameLab directly to your own GitHub repository.</li>
          <li><strong>Start Creating:</strong> Use the RPTS (RandomPlayables TypeScript) option in GameLab to generate a full project structure for a new game. If you're building a player-vs-player game, be sure to check the "Generate Gauntlet-enabled game" box. </li>
          <li><strong>Save Your Work:</strong> Once the AI has generated your game, save the code to your connected GitHub account.</li>
        </ol>

        <h3 className="text-xl font-medium mt-6 mb-2">Option B: Using an External LLM</h3>
        <p>
          If you prefer using a mainstream LLM like Gemini or GPT-5, you can ensure compatibility by providing the right context. 
        </p>
        <ol className="list-decimal pl-5">
          <li><strong>Provide Context:</strong> Give the LLM the full codebase of the main `randomplayables/rp` repository and an example of an existing game from the platform (like Gowap or Gotham Loops). Use tools like https://repomix.com/ to download codebases in an LLM-friendly-format.</li>
          <li><strong>Prompt for Compatibility:</strong> Clearly instruct the LLM to create a new game that is compatible with the platform's existing architecture, particularly the `apiService.ts` for session and data handling.</li>
        </ol>

        <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 2: Testing Your Game </h2>
        <p>
          The recommended way to test your game is with our forthcoming testing tool, which will be available at testgame.randomplayables.com. Developers can also earn RP points for contributing to the testing tool itself by working on the repository at <a href="https://github.com/randomplayables/testgame" target="_blank" rel="noopener noreferrer">github.com/randomplayables/testgame</a>.
        </p>
        <p>
          Alternatively, and as the current option for a complete end-to-end test, you can use the following methods:
        </p>
        <ol className="list-decimal pl-5">
          <li><strong>Local Testing:</strong> First, ensure the game runs correctly on your local computer.</li>
          <li><strong>Platform Integration Test:</strong> Set up a local development version of the RandomPlayables platform by following the instructions in our main GitHub repository's README file. Test your game within this environment to confirm it integrates correctly with the platform's APIs.</li>
        </ol>

        <h2 className="text-2xl font-semibold mt-8 mb-4 border-b pb-2">Step 3: Game Submission </h2>
        <p>
          Once your game is created, follow these steps to submit it for review.
        </p>
        <ol className="list-decimal pl-5">
          <li><strong>Create a GitHub Release:</strong> Go to your game's repository on GitHub. Create a new release and use a git tag that matches the version number you intend to submit (e.g., `v1.0.0`). This is a critical step for version control.</li>
          <li><strong>Navigate to Your Profile:</strong> Go to your user profile on the RandomPlayables platform.</li>
          <li><strong>Submit Your Game:</strong> Click on "Submit a Game" and carefully fill out the form. </li>
          <ul className="list-disc pl-5 my-2">
            <li><strong>Version Match:</strong> Ensure the version number you enter on the form is identical to the tag of your GitHub release. </li>
          </ul>
          <li><strong>Authorize for Peer Review:</strong> You will be prompted to connect your repository to our platform for peer review. When authorizing the GitHub App, grant access <strong>only</strong> to the specific repository for the game you are submitting. Do not grant access to all your repositories.</li>
          <li><strong>Await Review:</strong> Check your email for updates from our review team. If changes are required, you must create a new GitHub release with an updated version number and resubmit the game form. </li>
        </ol>
      </div>
    </div>
  );
}